import React, { useState } from "react";
import "./Cabinet.css";
import { useNavigate } from "react-router-dom";
import Modal from "../../components/UI/Modal/Modal";
import { api } from "../../Api";
import Loading from "../../components/UI/Loading/Loading";
import { FaEye, FaEyeSlash } from "react-icons/fa";

const data = [
  {
    id: 1,
  },
  {
    id: 2,
  },
];

const Cabinet = () => {
  const [modalLogou, setModalLogout] = useState(false);
  const [modalDelete, setModalDelete] = useState(false);
  const [modalChange, setModalChange] = useState(false);
  const [modalDeleteApplication, setModalDeleteApplication] = useState(false);
  const [modalEditAccount, setModalEditAccount] = useState(false);
  const [visible, setVisible] = useState({
    visible1: false,
    visible2: false,
    visible3: false,
  });
  const [password, setPassword] = useState({
    old_password: "",
    new_password: "",
    confirm_password: "",
  });
  const [loading, setLoading] = useState(false);
  const [dataAccount, setDataAccount] = useState({
    name: "Beka",
    number: "0990260795",
    password: "00000000",
  });
  const navigate = useNavigate();

  const ChangeFunc = async (e) => {
    e.preventDefault();
    if (
      password.new_password !== "" &&
      password.old_password !== "" &&
      password.confirm_password !== ""
    ) {
      if (password.new_password == password.confirm_password) {
        if (
          password.new_password.length >= 8 &&
          password.confirm_password.length >= 8
        ) {
          setLoading(true);
          try {
            const token = localStorage.getItem("token");
            const response = await api.post(
              "/auth/change-password/",
              {
                old_password: password.old_password,
                new_password: password.new_password,
                confirm_password: password.confirm_password,
              },
              {
                headers: {
                  Authorization: `Token ${token}`,
                },
              }
            );
            if (response.data.response === true) {
              alert(response.data.message, "success");
              setPassword({
                ...password,
                old_password: "",
                new_password: "",
                confirm_password: "",
              });
            } else {
              alert(response.data.message, "error");
            }
            setLoading(false);
          } catch (error) {
            setLoading(false);
            console.log(error);
          }
        } else {
          alert("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8-–º–∏ —Å–∏–º–≤–æ–ª–æ–≤", "error");
        }
      } else {
        alert("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç", "error");
      }
    } else {
      alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!", "error");
    }
  };

  return (
    <div className="cabinet">
      <div className="container">
        <h1>–ü—Ä–æ—Ñ–∏–ª—å</h1>
        <div className="white_block">
          <div className="between al">
            <h2 className="title">–î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞</h2>
            <div>
              <button
                onClick={() => setModalEditAccount(true)}
                className="button_form white"
              >
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </button>
            </div>
          </div>
          <div className="grid">
            <div className="col">
              <p className="text">–ò–º—è</p>
              <div>
                <button className="texting">–ê—Å–∞–Ω–±–µ–∫–æ–≤–∞ –ù—É—Ä–∑–∏–¥–∞</button>
              </div>
            </div>
            <div className="col">
              <p className="text">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</p>
              <div>
                <button className="texting">+996502800202</button>
              </div>
            </div>
            <div className="col">
              <p className="text">–ü–∞—Ä–æ–ª—å</p>
              <div>
                <button className="texting">**********</button>
              </div>
            </div>
            <div style={{ marginTop: 35 }} className="between">
              <p onClick={() => setModalChange(true)} className="text blue">
                –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
              </p>
              <p onClick={() => setModalLogout(true)} className="text red">
                –í—ã–π—Ç–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–∞
              </p>
            </div>
          </div>
        </div>
        <div style={{ marginTop: 20 }} className="white_block">
          <div className="between al">
            <h2 className="title">–ú–æ–∏ –∑–∞—è–≤–∫–∏</h2>
            <div>
              <button
                onClick={() => navigate("/post-application")}
                className="button_form"
              >
                + –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É
              </button>
            </div>
          </div>
          {data.map((el, index) => (
            <div className="applications_block">
              <div className="between">
                <div className="flex">
                  <h2 className="title">–ó–∞—è–≤–∫–∞ {index + 1}</h2>
                  <div className="sell_buy">–ø—Ä–æ–¥–∞–∂–∞</div>
                </div>
                <div className="flex">
                  <p
                    onClick={() => setModalDeleteApplication(true)}
                    className="text red"
                  >
                    –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É
                  </p>
                  <button
                    onClick={() => navigate("/change-post-application")}
                    style={{ width: 160 }}
                    className="button_form white"
                  >
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                  </button>
                </div>
              </div>
              <div className="grid_two">
                <div className="white_block">
                  <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                  <div className="column">
                    <div className="between">
                      <p className="text">–í–∞–ª—é—Ç–∞</p>
                      <div>
                        <button className="texting">–ë–∏—Ç–∫–æ–∏–Ω (BTC)</button>
                      </div>
                    </div>
                    <div className="between">
                      <p className="text">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</p>
                      <div>
                        <button className="texting">2</button>
                      </div>
                    </div>
                    <div className="between">
                      <p className="text">–ü–æ –∫—É—Ä—Å—É</p>
                      <div>
                        <button className="texting">64.11512</button>
                      </div>
                    </div>
                    <div className="between">
                      <p className="text">–û–ø–ª–∞—Ç–∞</p>
                      <div>
                        <button className="texting">–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥</button>
                      </div>
                    </div>
                    <div className="between">
                      <p className="text">–ú–µ—Å—Ç–æ —Å–¥–µ–ª–∫–∏</p>
                      <div>
                        <button className="texting">
                          –≥. –ë–∏—à–∫–µ–∫, —É–ª. –¢–æ–≥–æ–ª–æ–∫ –ú–æ–ª–¥–æ 54/7
                        </button>
                      </div>
                    </div>
                    <div className="between">
                      <p className="text">–í—Ä–µ–º—è</p>
                      <div>
                        <button className="texting">12:30</button>
                      </div>
                    </div>
                  </div>
                </div>
                <div className="white_block">
                  <h3>–£—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏</h3>
                  <p className="desc">
                    üö´No third party payment accepted. üö´Do not make payment
                    from scam money. ‚úÖPlease pay I'm online. Send me Receipt
                    Name should be visible in receipt. üö´Do not buy for any
                    illegal activities. üö´I'm not responsible if you lose your
                    valuable money for any scam scheme. üö´ Please don‚Äôt write in
                    Remarks any words like Crypto, Binance, USDT, BNB, ETH etc.{" "}
                  </p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
      {modalEditAccount && (
        <Modal setModal={setModalEditAccount}>
          <h5>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞</h5>
          <form style={{ width: 500 }} className="form_password">
            <div className="input_box">
              <label className="label_form">–ò–º—è</label>
              <input
                className="input_form"
                value={dataAccount.name}
                onChange={(e) =>
                  setDataAccount({ ...dataAccount, name: e.target.value })
                }
                type="text"
                placeholder="–§–ò–û"
                required
              />
            </div>
            <div className="input_box">
              <label className="label_form">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</label>
              <input
                className="input_form disablet"
                value={dataAccount.number}
                onChange={(e) =>
                  setDataAccount({ ...dataAccount, number: e.target.value })
                }
                type="number"
                disabled={true}
                required
              />
            </div>
            <div className="input_box">
              <label className="label_form">–ü–∞—Ä–æ–ª—å</label>
              <input
                className="input_form disablet"
                value={dataAccount.password}
                onChange={(e) =>
                  setDataAccount({ ...dataAccount, password: e.target.value })
                }
                type="password"
                disabled={true}
                required
              />
            </div>
            <p
              onClick={() => setModalDelete(true) || setModalEditAccount(false)}
              className="text red"
            >
              –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
            </p>
            <button
              onClick={() => setModalEditAccount(false)}
              style={{ marginTop: 20 }}
              className="button_form"
            >
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            </button>
          </form>
        </Modal>
      )}
      {modalChange && (
        <Modal setModal={setModalChange}>
          <h5>–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å</h5>
          <p className="modal_text">
            –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –¥–ª—è –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
          </p>
          <form onSubmit={ChangeFunc} className="form_password">
            <div className="input_box">
              <label className="label_form">–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å</label>
              <input
                className="input_form"
                value={password.old_password}
                onChange={(e) =>
                  setPassword({ ...password, old_password: e.target.value })
                }
                type={visible.visible1 ? "text" : "password"}
                placeholder="–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å"
                required
              />
              <span
                className="span-icon"
                onClick={() =>
                  setVisible({ ...visible, visible1: !visible.visible1 })
                }
              >
                {visible.visible1 ? <FaEye /> : <FaEyeSlash />}{" "}
              </span>
            </div>
            <div className="input_box">
              <label className="label_form">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</label>
              <input
                className="input_form"
                value={password.new_password}
                onChange={(e) =>
                  setPassword({ ...password, new_password: e.target.value })
                }
                type={visible.visible2 ? "text" : "password"}
                placeholder="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                required
              />
              <span
                className="span-icon"
                onClick={() =>
                  setVisible({ ...visible, visible2: !visible.visible2 })
                }
              >
                {visible.visible2 ? <FaEye /> : <FaEyeSlash />}{" "}
              </span>
            </div>
            <div className="input_box">
              <label className="label_form">–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</label>
              <input
                className="input_form"
                value={password.confirm_password}
                onChange={(e) =>
                  setPassword({ ...password, confirm_password: e.target.value })
                }
                type={visible.visible3 ? "text" : "password"}
                placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                required
              />
              <span
                className="span-icon"
                onClick={() =>
                  setVisible({ ...visible, visible3: !visible.visible3 })
                }
              >
                {visible.visible3 ? <FaEye /> : <FaEyeSlash />}{" "}
              </span>
            </div>
            <button
              style={{ marginTop: 20 }}
              disabled={loading}
              onSubmit={ChangeFunc}
              className="button_form"
            >
              {loading ? <Loading /> : "–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å"}
            </button>
          </form>
        </Modal>
      )}
      {modalDeleteApplication && (
        <Modal setModal={setModalDeleteApplication}>
          <h5>–£–¥–∞–ª–∏—Ç—å –ó–∞—è–≤–∫—É</h5>
          <p style={{ width: 340, margin: "24px 0" }} className="modal_text">
            –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É? –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            –≤–∞–ª—é—Ç—ã –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é
          </p>
          <div className="btns">
            <button className="button_form off">–û—Ç–º–µ–Ω–∞</button>
            <button className="button_form on">–£–¥–∞–ª–∏—Ç—å</button>
          </div>
        </Modal>
      )}
      {modalDelete && (
        <Modal setModal={setModalDelete}>
          <h5>–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?</h5>
          <p style={{ width: 340, margin: "24px 0" }} className="modal_text">
            –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é
          </p>
          <div className="btns">
            <button className="button_form off">–û—Ç–º–µ–Ω–∞</button>
            <button className="button_form on">–£–¥–∞–ª–∏—Ç—å</button>
          </div>
        </Modal>
      )}
      {modalLogou && (
        <Modal setModal={setModalLogout}>
          <h5>–í—ã–π—Ç–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–∞?</h5>
          <p style={{ width: 340, margin: "24px 0" }} className="modal_text">
            –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–∞? –í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è
            —Å–Ω–æ–≤–∞ –≤–æ–π—Ç–∏ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç
          </p>
          <div className="btns">
            <button className="button_form off">–û—Ç–º–µ–Ω–∞</button>
            <button className="button_form on">–í—ã–π—Ç–∏</button>
          </div>
        </Modal>
      )}
    </div>
  );
};

export default Cabinet;
